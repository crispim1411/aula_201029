
teste1.elf:     file format elf32-littlenios2
teste1.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00010020

Program Header:
    LOAD off    0x00001000 vaddr 0x00010000 paddr 0x00010000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00010020 paddr 0x00010020 align 2**12
         filesz 0x00000440 memsz 0x00000440 flags r-x
    LOAD off    0x00001460 vaddr 0x00010460 paddr 0x00010464 align 2**12
         filesz 0x00000004 memsz 0x00000004 flags rw-
    LOAD off    0x00001468 vaddr 0x00010468 paddr 0x00010468 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00010000  00010000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .text         00000428  00010020  00010020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00010448  00010448  00001448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rwdata       00000004  00010460  00010464  00001460  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  4 .bss          00000010  00010468  00010468  00001468  2**2
                  ALLOC, SMALL_DATA
  5 .comment      00000026  00000000  00000000  00001464  2**0
                  CONTENTS, READONLY
  6 .debug_aranges 000001e8  00000000  00000000  00001490  2**3
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_pubnames 0000029b  00000000  00000000  00001678  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   00000eb6  00000000  00000000  00001913  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00000789  00000000  00000000  000027c9  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00001e8e  00000000  00000000  00002f52  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00000280  00000000  00000000  00004de0  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    00000710  00000000  00000000  00005060  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000039f  00000000  00000000  00005770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000040  00000000  00000000  00005b10  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000020  00000000  00000000  00005b50  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  00006a57  2**0
                  CONTENTS, READONLY
 17 .cpu          0000000d  00000000  00000000  00006a5a  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00006a67  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00006a68  2**0
                  CONTENTS, READONLY
 20 .stderr_dev   0000000c  00000000  00000000  00006a69  2**0
                  CONTENTS, READONLY
 21 .stdin_dev    0000000c  00000000  00000000  00006a75  2**0
                  CONTENTS, READONLY
 22 .stdout_dev   0000000c  00000000  00000000  00006a81  2**0
                  CONTENTS, READONLY
 23 .sopc_system_name 00000010  00000000  00000000  00006a8d  2**0
                  CONTENTS, READONLY
 24 .quartus_project_dir 0000004f  00000000  00000000  00006a9d  2**0
                  CONTENTS, READONLY
 25 .sopcinfo     0003dcee  00000000  00000000  00006aec  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00010000 l    d  .entry	00000000 .entry
00010020 l    d  .text	00000000 .text
00010448 l    d  .rodata	00000000 .rodata
00010460 l    d  .rwdata	00000000 .rwdata
00010468 l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_pubnames	00000000 .debug_pubnames
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00010058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world_small.c
00000000 l    df *ABS*	00000000 alt_load.c
000100bc l     F .text	00000020 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_putstr.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
000102c4 l     F .text	0000007c udivmodsi4
00000000 l    df *ABS*	00000000 lib2-mul.c
00010148 g     F .text	0000002c alt_main
00010464 g       *ABS*	00000000 __flash_rwdata_start
00010174 g     F .text	00000038 alt_putstr
00010000 g     F .entry	0000000c __reset
00010468 g     O .bss	00000001 hex0
00010020 g       *ABS*	00000000 __flash_exceptions_start
00010470 g     O .bss	00000004 alt_argv
00018460 g       *ABS*	00000000 _gp
000101ac g     F .text	00000004 usleep
00010070 g     F .text	0000002c loop
00010400 g     F .text	00000008 __udivsi3
00010460 g     O .rwdata	00000004 jtag_uart_rc
00010478 g       *ABS*	00000000 __bss_end
00010294 g     F .text	00000004 alt_dcache_flush_all
00010000 g       *ABS*	00000000 __alt_mem_onchip_memory2_rc
00010464 g       *ABS*	00000000 __ram_rwdata_end
00010460 g       *ABS*	00000000 __ram_rodata_end
00010408 g     F .text	00000008 __umodsi3
00010478 g       *ABS*	00000000 end
0001a000 g       *ABS*	00000000 __alt_stack_pointer
000101d4 g     F .text	00000034 altera_avalon_jtag_uart_write
00010020 g     F .text	0000003c _start
000101b0 g     F .text	00000004 alt_sys_init
00010410 g     F .text	00000038 __mulsi3
00010460 g       *ABS*	00000000 __ram_rwdata_start
00010448 g       *ABS*	00000000 __ram_rodata_start
00010208 g     F .text	0000008c alt_busy_sleep
00010478 g       *ABS*	00000000 __alt_stack_base
00010468 g       *ABS*	00000000 __bss_start
0001009c g     F .text	00000020 main
00010474 g     O .bss	00000004 alt_envp
00010469 g     O .bss	00000001 key
00010340 g     F .text	00000060 __divsi3
00010448 g       *ABS*	00000000 __flash_rodata_start
000101b4 g     F .text	00000020 alt_irq_init
0001046c g     O .bss	00000004 alt_argc
0001046a g     O .bss	00000001 sw
0001005c g     F .text	00000014 setup
0001046b g     O .bss	00000001 ledr
00010020 g       *ABS*	00000000 __ram_exceptions_start
00010464 g       *ABS*	00000000 _edata
00010478 g       *ABS*	00000000 _end
00010020 g       *ABS*	00000000 __ram_exceptions_end
0001029c g     F .text	00000008 altera_nios2_qsys_irq_init
0001000c g       .entry	00000000 exit
000103a0 g     F .text	00000060 __modsi3
0001a000 g       *ABS*	00000000 __alt_data_end
0001000c g       .entry	00000000 _exit
000102a4 g     F .text	00000020 strlen
00010298 g     F .text	00000004 alt_icache_flush_all
000100dc g     F .text	0000006c alt_load



Disassembly of section .entry:

00010000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   10000:	00400074 	movhi	at,1
    ori r1, r1, %lo(_start)
   10004:	08400814 	ori	at,at,32
    jmp r1
   10008:	0800683a 	jmp	at

0001000c <_exit>:
	...

Disassembly of section .text:

00010020 <_start>:
#if (NIOS2_NUM_OF_SHADOW_REG_SETS == 0)    
    /*
     * Now that the caches are initialized, set up the stack pointer.
     * The value provided by the linker is assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
   10020:	06c00074 	movhi	sp,1
    ori sp, sp, %lo(__alt_stack_pointer)
   10024:	dee80014 	ori	sp,sp,40960

    /* Set up the global pointer. */
    movhi gp, %hi(_gp)
   10028:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
   1002c:	d6a11814 	ori	gp,gp,33888
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
   10030:	00800074 	movhi	r2,1
    ori r2, r2, %lo(__bss_start)
   10034:	10811a14 	ori	r2,r2,1128

    movhi r3, %hi(__bss_end)
   10038:	00c00074 	movhi	r3,1
    ori r3, r3, %lo(__bss_end)
   1003c:	18c11e14 	ori	r3,r3,1144

    beq r2, r3, 1f
   10040:	10c00326 	beq	r2,r3,10050 <_start+0x30>

0:
    stw zero, (r2)
   10044:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
   10048:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
   1004c:	10fffd36 	bltu	r2,r3,10044 <_start+0x24>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
   10050:	00100dc0 	call	100dc <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
   10054:	00101480 	call	10148 <alt_main>

00010058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
   10058:	003fff06 	br	10058 <alt_after_alt_main>

0001005c <setup>:

alt_u8 hex0, key, sw, ledr;

void setup(void)
{
	LAT(HEX0_RC_BASE, 0x5b);
   1005c:	00c016c4 	movi	r3,91
   10060:	008000b4 	movhi	r2,2
   10064:	10841004 	addi	r2,r2,4160
   10068:	10c00035 	stwio	r3,0(r2)
}
   1006c:	f800283a 	ret

00010070 <loop>:

void loop(void)
{
	sw = PORT(SW_RC_BASE); 	//leitura de entrada
   10070:	008000b4 	movhi	r2,2
   10074:	10841c04 	addi	r2,r2,4208
   10078:	10800037 	ldwio	r2,0(r2)
	ledr = sw; 				//processamento de dado
	LAT(LEDR_RC_BASE, ledr); //escrita de dado
   1007c:	10c03fcc 	andi	r3,r2,255
	LAT(HEX0_RC_BASE, 0x5b);
}

void loop(void)
{
	sw = PORT(SW_RC_BASE); 	//leitura de entrada
   10080:	d0a00285 	stb	r2,-32758(gp)
	ledr = sw; 				//processamento de dado
   10084:	d0a002c5 	stb	r2,-32757(gp)
	LAT(LEDR_RC_BASE, ledr); //escrita de dado
   10088:	008000b4 	movhi	r2,2
   1008c:	10841404 	addi	r2,r2,4176
   10090:	10c00035 	stwio	r3,0(r2)
	usleep(10000);
   10094:	0109c404 	movi	r4,10000
   10098:	00101ac1 	jmpi	101ac <usleep>

0001009c <main>:
}

int main()
{ 
   1009c:	deffff04 	addi	sp,sp,-4
  alt_putstr("Hello from Nios II!\n");
   100a0:	01000074 	movhi	r4,1
   100a4:	21011204 	addi	r4,r4,1096
	LAT(LEDR_RC_BASE, ledr); //escrita de dado
	usleep(10000);
}

int main()
{ 
   100a8:	dfc00015 	stw	ra,0(sp)
  alt_putstr("Hello from Nios II!\n");
   100ac:	00101740 	call	10174 <alt_putstr>

  setup();
   100b0:	001005c0 	call	1005c <setup>

  while (1) loop();
   100b4:	00100700 	call	10070 <loop>
   100b8:	003ffe06 	br	100b4 <main+0x18>

000100bc <alt_load_section>:

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
   100bc:	2900051e 	bne	r5,r4,100d4 <alt_load_section+0x18>
   100c0:	f800283a 	ret
  {
    while( to != end )
    {
      *to++ = *from++;
   100c4:	20800017 	ldw	r2,0(r4)
   100c8:	21000104 	addi	r4,r4,4
   100cc:	28800015 	stw	r2,0(r5)
   100d0:	29400104 	addi	r5,r5,4
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
   100d4:	29bffb1e 	bne	r5,r6,100c4 <alt_load_section+0x8>
   100d8:	f800283a 	ret

000100dc <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100dc:	deffff04 	addi	sp,sp,-4
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   100e0:	01000074 	movhi	r4,1
   100e4:	21011904 	addi	r4,r4,1124
   100e8:	01400074 	movhi	r5,1
   100ec:	29411804 	addi	r5,r5,1120
   100f0:	01800074 	movhi	r6,1
   100f4:	31811904 	addi	r6,r6,1124
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
   100f8:	dfc00015 	stw	ra,0(sp)
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
   100fc:	00100bc0 	call	100bc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
   10100:	01000074 	movhi	r4,1
   10104:	21000804 	addi	r4,r4,32
   10108:	01400074 	movhi	r5,1
   1010c:	29400804 	addi	r5,r5,32
   10110:	01800074 	movhi	r6,1
   10114:	31800804 	addi	r6,r6,32
   10118:	00100bc0 	call	100bc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
   1011c:	01000074 	movhi	r4,1
   10120:	21011204 	addi	r4,r4,1096
   10124:	01400074 	movhi	r5,1
   10128:	29411204 	addi	r5,r5,1096
   1012c:	01800074 	movhi	r6,1
   10130:	31811804 	addi	r6,r6,1120
   10134:	00100bc0 	call	100bc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
   10138:	00102940 	call	10294 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
   1013c:	dfc00017 	ldw	ra,0(sp)
   10140:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
   10144:	00102981 	jmpi	10298 <alt_icache_flush_all>

00010148 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10148:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   1014c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
   10150:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
   10154:	00101b40 	call	101b4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
   10158:	00101b00 	call	101b0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   1015c:	d1200317 	ldw	r4,-32756(gp)
   10160:	d1600417 	ldw	r5,-32752(gp)
   10164:	d1a00517 	ldw	r6,-32748(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
   10168:	dfc00017 	ldw	ra,0(sp)
   1016c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
   10170:	001009c1 	jmpi	1009c <main>

00010174 <alt_putstr>:
 * Uses the ALT_DRIVER_WRITE() macro to call directly to driver if available.
 * Otherwise, uses newlib provided fputs() routine.
 */
int 
alt_putstr(const char* str)
{
   10174:	defffe04 	addi	sp,sp,-8
   10178:	dc000015 	stw	r16,0(sp)
   1017c:	dfc00115 	stw	ra,4(sp)
   10180:	2021883a 	mov	r16,r4
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   10184:	00102a40 	call	102a4 <strlen>
   10188:	800b883a 	mov	r5,r16
   1018c:	100d883a 	mov	r6,r2
   10190:	01000074 	movhi	r4,1
   10194:	21011804 	addi	r4,r4,1120
   10198:	000f883a 	mov	r7,zero
#else
    return fputs(str, stdout);
#endif
}
   1019c:	dfc00117 	ldw	ra,4(sp)
   101a0:	dc000017 	ldw	r16,0(sp)
   101a4:	dec00204 	addi	sp,sp,8
int 
alt_putstr(const char* str)
{
#ifdef ALT_USE_DIRECT_DRIVERS
    ALT_DRIVER_WRITE_EXTERNS(ALT_STDOUT_DEV);
    return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, str, strlen(str), 0);
   101a8:	00101d41 	jmpi	101d4 <altera_avalon_jtag_uart_write>

000101ac <usleep>:
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
  return alt_busy_sleep(us);
   101ac:	00102081 	jmpi	10208 <alt_busy_sleep>

000101b0 <alt_sys_init>:
 */

void alt_sys_init( void )
{
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_RC, jtag_uart_rc);
}
   101b0:	f800283a 	ret

000101b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
   101b4:	deffff04 	addi	sp,sp,-4
   101b8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_RC, nios2_qsys_rc);
   101bc:	001029c0 	call	1029c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
   101c0:	00800044 	movi	r2,1
   101c4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
   101c8:	dfc00017 	ldw	ra,0(sp)
   101cc:	dec00104 	addi	sp,sp,4
   101d0:	f800283a 	ret

000101d4 <altera_avalon_jtag_uart_write>:
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
  unsigned int base = sp->base;
   101d4:	21000017 	ldw	r4,0(r4)

  const char * end = ptr + count;
   101d8:	298f883a 	add	r7,r5,r6
   101dc:	20c00104 	addi	r3,r4,4
   101e0:	00000606 	br	101fc <altera_avalon_jtag_uart_write+0x28>

  while (ptr < end)
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
   101e4:	18800037 	ldwio	r2,0(r3)
   101e8:	10bfffec 	andhi	r2,r2,65535
   101ec:	10000326 	beq	r2,zero,101fc <altera_avalon_jtag_uart_write+0x28>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
   101f0:	28800007 	ldb	r2,0(r5)
   101f4:	29400044 	addi	r5,r5,1
   101f8:	20800035 	stwio	r2,0(r4)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
   101fc:	29fff936 	bltu	r5,r7,101e4 <altera_avalon_jtag_uart_write+0x10>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
}
   10200:	3005883a 	mov	r2,r6
   10204:	f800283a 	ret

00010208 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10208:	defffe04 	addi	sp,sp,-8
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   1020c:	014666b4 	movhi	r5,6554
   10210:	29666644 	addi	r5,r5,-26215
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
   10214:	dc000015 	stw	r16,0(sp)
   10218:	dfc00115 	stw	ra,4(sp)
   1021c:	2021883a 	mov	r16,r4
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
   10220:	00104000 	call	10400 <__udivsi3>
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
   10224:	10001126 	beq	r2,zero,1026c <alt_busy_sleep+0x64>
   10228:	0007883a 	mov	r3,zero
   1022c:	01200034 	movhi	r4,32768
   10230:	213fffc4 	addi	r4,r4,-1
   10234:	017999b4 	movhi	r5,58982
   10238:	295999c4 	addi	r5,r5,26215
   1023c:	00000406 	br	10250 <alt_busy_sleep+0x48>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
   10240:	213fffc4 	addi	r4,r4,-1
   10244:	203ffe1e 	bne	r4,zero,10240 <alt_busy_sleep+0x38>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
   10248:	8161883a 	add	r16,r16,r5
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
   1024c:	18c00044 	addi	r3,r3,1
   10250:	18bffb16 	blt	r3,r2,10240 <alt_busy_sleep+0x38>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   10254:	8009883a 	mov	r4,r16
   10258:	01400144 	movi	r5,5
   1025c:	00104100 	call	10410 <__mulsi3>
   10260:	10bfffc4 	addi	r2,r2,-1
   10264:	103ffe1e 	bne	r2,zero,10260 <alt_busy_sleep+0x58>
   10268:	00000506 	br	10280 <alt_busy_sleep+0x78>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
   1026c:	8009883a 	mov	r4,r16
   10270:	01400144 	movi	r5,5
   10274:	00104100 	call	10410 <__mulsi3>
   10278:	10bfffc4 	addi	r2,r2,-1
   1027c:	00bffe16 	blt	zero,r2,10278 <alt_busy_sleep+0x70>
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
}
   10280:	0005883a 	mov	r2,zero
   10284:	dfc00117 	ldw	ra,4(sp)
   10288:	dc000017 	ldw	r16,0(sp)
   1028c:	dec00204 	addi	sp,sp,8
   10290:	f800283a 	ret

00010294 <alt_dcache_flush_all>:
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
   10294:	f800283a 	ret

00010298 <alt_icache_flush_all>:
void alt_icache_flush_all (void)
{
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
   10298:	f800283a 	ret

0001029c <altera_nios2_qsys_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
   1029c:	000170fa 	wrctl	ienable,zero
}
   102a0:	f800283a 	ret

000102a4 <strlen>:
   102a4:	20800007 	ldb	r2,0(r4)
   102a8:	10000526 	beq	r2,zero,102c0 <strlen+0x1c>
   102ac:	2007883a 	mov	r3,r4
   102b0:	18c00044 	addi	r3,r3,1
   102b4:	18800007 	ldb	r2,0(r3)
   102b8:	103ffd1e 	bne	r2,zero,102b0 <strlen+0xc>
   102bc:	1905c83a 	sub	r2,r3,r4
   102c0:	f800283a 	ret

000102c4 <udivmodsi4>:
   102c4:	29001b2e 	bgeu	r5,r4,10334 <udivmodsi4+0x70>
   102c8:	28001a16 	blt	r5,zero,10334 <udivmodsi4+0x70>
   102cc:	00800044 	movi	r2,1
   102d0:	0007883a 	mov	r3,zero
   102d4:	01c007c4 	movi	r7,31
   102d8:	00000306 	br	102e8 <udivmodsi4+0x24>
   102dc:	19c01326 	beq	r3,r7,1032c <udivmodsi4+0x68>
   102e0:	18c00044 	addi	r3,r3,1
   102e4:	28000416 	blt	r5,zero,102f8 <udivmodsi4+0x34>
   102e8:	294b883a 	add	r5,r5,r5
   102ec:	1085883a 	add	r2,r2,r2
   102f0:	293ffa36 	bltu	r5,r4,102dc <udivmodsi4+0x18>
   102f4:	10000d26 	beq	r2,zero,1032c <udivmodsi4+0x68>
   102f8:	0007883a 	mov	r3,zero
   102fc:	21400236 	bltu	r4,r5,10308 <udivmodsi4+0x44>
   10300:	2149c83a 	sub	r4,r4,r5
   10304:	1886b03a 	or	r3,r3,r2
   10308:	1004d07a 	srli	r2,r2,1
   1030c:	280ad07a 	srli	r5,r5,1
   10310:	103ffa1e 	bne	r2,zero,102fc <udivmodsi4+0x38>
   10314:	30000226 	beq	r6,zero,10320 <udivmodsi4+0x5c>
   10318:	2005883a 	mov	r2,r4
   1031c:	f800283a 	ret
   10320:	1809883a 	mov	r4,r3
   10324:	2005883a 	mov	r2,r4
   10328:	f800283a 	ret
   1032c:	0007883a 	mov	r3,zero
   10330:	003ff806 	br	10314 <udivmodsi4+0x50>
   10334:	00800044 	movi	r2,1
   10338:	0007883a 	mov	r3,zero
   1033c:	003fef06 	br	102fc <udivmodsi4+0x38>

00010340 <__divsi3>:
   10340:	defffe04 	addi	sp,sp,-8
   10344:	dc000015 	stw	r16,0(sp)
   10348:	dfc00115 	stw	ra,4(sp)
   1034c:	0021883a 	mov	r16,zero
   10350:	20000c16 	blt	r4,zero,10384 <__divsi3+0x44>
   10354:	000d883a 	mov	r6,zero
   10358:	28000e16 	blt	r5,zero,10394 <__divsi3+0x54>
   1035c:	00102c40 	call	102c4 <udivmodsi4>
   10360:	1007883a 	mov	r3,r2
   10364:	8005003a 	cmpeq	r2,r16,zero
   10368:	1000011e 	bne	r2,zero,10370 <__divsi3+0x30>
   1036c:	00c7c83a 	sub	r3,zero,r3
   10370:	1805883a 	mov	r2,r3
   10374:	dfc00117 	ldw	ra,4(sp)
   10378:	dc000017 	ldw	r16,0(sp)
   1037c:	dec00204 	addi	sp,sp,8
   10380:	f800283a 	ret
   10384:	0109c83a 	sub	r4,zero,r4
   10388:	04000044 	movi	r16,1
   1038c:	000d883a 	mov	r6,zero
   10390:	283ff20e 	bge	r5,zero,1035c <__divsi3+0x1c>
   10394:	014bc83a 	sub	r5,zero,r5
   10398:	8021003a 	cmpeq	r16,r16,zero
   1039c:	003fef06 	br	1035c <__divsi3+0x1c>

000103a0 <__modsi3>:
   103a0:	deffff04 	addi	sp,sp,-4
   103a4:	dfc00015 	stw	ra,0(sp)
   103a8:	01800044 	movi	r6,1
   103ac:	2807883a 	mov	r3,r5
   103b0:	20000416 	blt	r4,zero,103c4 <__modsi3+0x24>
   103b4:	28000c16 	blt	r5,zero,103e8 <__modsi3+0x48>
   103b8:	dfc00017 	ldw	ra,0(sp)
   103bc:	dec00104 	addi	sp,sp,4
   103c0:	00102c41 	jmpi	102c4 <udivmodsi4>
   103c4:	0109c83a 	sub	r4,zero,r4
   103c8:	28000b16 	blt	r5,zero,103f8 <__modsi3+0x58>
   103cc:	180b883a 	mov	r5,r3
   103d0:	01800044 	movi	r6,1
   103d4:	00102c40 	call	102c4 <udivmodsi4>
   103d8:	0085c83a 	sub	r2,zero,r2
   103dc:	dfc00017 	ldw	ra,0(sp)
   103e0:	dec00104 	addi	sp,sp,4
   103e4:	f800283a 	ret
   103e8:	014bc83a 	sub	r5,zero,r5
   103ec:	dfc00017 	ldw	ra,0(sp)
   103f0:	dec00104 	addi	sp,sp,4
   103f4:	00102c41 	jmpi	102c4 <udivmodsi4>
   103f8:	0147c83a 	sub	r3,zero,r5
   103fc:	003ff306 	br	103cc <__modsi3+0x2c>

00010400 <__udivsi3>:
   10400:	000d883a 	mov	r6,zero
   10404:	00102c41 	jmpi	102c4 <udivmodsi4>

00010408 <__umodsi3>:
   10408:	01800044 	movi	r6,1
   1040c:	00102c41 	jmpi	102c4 <udivmodsi4>

00010410 <__mulsi3>:
   10410:	20000a26 	beq	r4,zero,1043c <__mulsi3+0x2c>
   10414:	0007883a 	mov	r3,zero
   10418:	2080004c 	andi	r2,r4,1
   1041c:	1005003a 	cmpeq	r2,r2,zero
   10420:	2008d07a 	srli	r4,r4,1
   10424:	1000011e 	bne	r2,zero,1042c <__mulsi3+0x1c>
   10428:	1947883a 	add	r3,r3,r5
   1042c:	294b883a 	add	r5,r5,r5
   10430:	203ff91e 	bne	r4,zero,10418 <__mulsi3+0x8>
   10434:	1805883a 	mov	r2,r3
   10438:	f800283a 	ret
   1043c:	0007883a 	mov	r3,zero
   10440:	1805883a 	mov	r2,r3
   10444:	f800283a 	ret
